@page "/add_people"
@using Models
@using System.Collections.Generic;
@using DNP_Assignment1.Components
@using DNP_Assignment1.Persistence
@inject FileContext _fileContext;

<Search></Search>

<div class="content px-4">
    <h1>All Adults</h1>
    <h5><span style="color: white" class="badge bg-secondary">Search by:</span></h5>
    <div class="container">
        <div class="row">
            <div class="col-sm">
                <input class="form-control" placeholder="First name"  value="@ValueFirstName" @oninput="OnInputChangeFisrtName"/>
            </div>
            <div class="col-sm">
                <input class="form-control" placeholder="Last name"  value="@ValueLastName" @oninput="OnInputChangeLastName"/>
            </div>
            <div class="col-sm">
                <input class="form-control" placeholder="ID"  value="@ValueId" @oninput="OnInputChangeId"/>
            </div>
        </div>
    </div>


    <div class="card-columns">
        @foreach (var adult in _fileContext.SearchAdult(searchOption))
        {
            <AdultContainer adult=@adult/>
        }
    </div>
</div>



@code{
    public string ValueFirstName { get; set; }

    public string ValueLastName { get; set; }

    public string ValueId { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    string[] searchOption = {"",""};
    
    private async Task OnInputChangeFisrtName(ChangeEventArgs args )
    {
        ValueFirstName = (string)args.Value;
        searchOption[0] = "firstName";
        searchOption[1] = ValueFirstName;
        await ValueChanged.InvokeAsync(ValueFirstName);
    }
    private async Task OnInputChangeLastName(ChangeEventArgs args )
    {
        ValueLastName = (string)args.Value;
        searchOption[0] = "lastName";
        searchOption[1] = ValueLastName;
        await ValueChanged.InvokeAsync(ValueLastName);
    }
    private async Task OnInputChangeId(ChangeEventArgs args )
    {
        ValueId = (string)args.Value;
        searchOption[0] = "id";
        searchOption[1] = ValueId;
        await ValueChanged.InvokeAsync(ValueId);
    }
    
    private void Reload()
    {
        searchOption[0] = "";
        searchOption[1] = "";
    }
}

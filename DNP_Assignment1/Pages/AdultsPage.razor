@page "/adults"
@using Models
@using System.Collections.Generic;
@using System.Reflection.Metadata
@using DNP_Assignment1.Components
@using DNP_Assignment1.Data.Services
@using DNP_Assignment1.Data.Services.AdultServices
@using Microsoft.AspNetCore.Mvc.Filters
@inject IAdultService _adultService;

<Search></Search>

<div class="content px-4">
    <h1>All Adults</h1>
    

<h5><span style="color: white" class="badge bg-secondary">Search by:</span></h5>
<div class="container">
    <div class="row">
        <div class="col-sm">
            <input class="form-control" placeholder="Id" @oninput="@((arg) => FilterById(arg))"/>
        </div>
        <div class="col-sm">
            <input class="form-control" placeholder="First name" @oninput="@((arg) => FilterByFirstName(arg))"/>
        </div>
        <div class="col-sm">
            <input class="form-control" placeholder="Last name" @oninput="@((arg) => FilterByLastName(arg))"/>
        </div>
    </div>
</div>


    
    @if (allAdults == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (!allAdults.Any())
    {
        <p>
            <em>No ToDo items exist. Please add some.</em>
        </p>
    }
    @if (allAdults != null)
    {
        <div class="card-columns">
            @foreach (var adult in adultsToShow)
            {
                <AdultContainer adult=@adult/>
            }
        </div>

    }
</div>



@code{
    private IList<Adult> allAdults;
    private IList<Adult> adultsToShow;
    
    private string? filterById;
    private string? filterByFisrtName;
    private string? filterByLastName;
    
    
    private void FilterById(ChangeEventArgs changeEventArgs) {
        filterById = null;
        filterByFisrtName = null;
        filterByLastName = null;
        try {
            filterById = changeEventArgs.Value.ToString();
        } catch (Exception e) { }
        ExecuteFilter();
    }
    
    private void FilterByFirstName(ChangeEventArgs changeEventArgs) {
        filterById = null;
        filterByFisrtName = null;
        filterByLastName = null;
        try {
            filterByFisrtName = changeEventArgs.Value.ToString();
        } catch (Exception e) { }
        ExecuteFilter();
    }
    
    private void FilterByLastName(ChangeEventArgs changeEventArgs) {
        filterById = null;
        filterByFisrtName = null;
        filterByLastName = null;
        try
        {
            filterByLastName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }
    
    private void ExecuteFilter() {
        if (filterById != null)
        {
            adultsToShow = allAdults.Where(t => t.Id.ToString().Contains(filterById)).ToList();
        }
        else if (filterByFisrtName != null)
        {
            adultsToShow = allAdults.Where(t => t.FirstName.ToString().Contains(filterByFisrtName)).ToList();
        }
        else if (filterByLastName != null)
        {
            Console.Out.WriteLine(filterByLastName);
            adultsToShow = allAdults.Where(t => t.LastName.ToString().Contains(filterByLastName)).ToList();
        }
        else
        {
            adultsToShow = allAdults;
        }
    }

    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            allAdults = await _adultService.GetAdultsAsync();
            adultsToShow = allAdults;
        }
        catch (Exception e)
        {
    // update some error label here, or show popup..
        }
    }
}

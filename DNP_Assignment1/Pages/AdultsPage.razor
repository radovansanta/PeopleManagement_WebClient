@page "/adults"
@using Models
@using System.Collections.Generic;
@using DNP_Assignment1.Components
@using DNP_Assignment1.Data.Services
@using DNP_Assignment1.Persistence
@inject FileContext _fileContext;
@inject IAdultService _adultService;

<Search></Search>

<div class="content px-4">
    <h1>All Adults</h1>
    
<!--
<h5><span style="color: white" class="badge bg-secondary">Search by:</span></h5>
<div class="container">
    <div class="row">
        <div class="col-sm">
            <input class="form-control" placeholder="First name"  value="" @oninput=""/>
        </div>
        <div class="col-sm">
            <input class="form-control" placeholder="Last name"  value="" @oninput=""/>
        </div>
        <div class="col-sm">
            <input class="form-control" placeholder="ID"  value="" @oninput=""/>
        </div>
    </div>
</div>
-->

    
    @if (allAdults == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (!allAdults.Any())
    {
        <p>
            <em>No ToDo items exist. Please add some.</em>
        </p>
    }
    @if (allAdults != null)
    {
        <div class="card-columns">
            @foreach (var adult in allAdults)
            {
                <AdultContainer adult=@adult/>
            }
        </div>

    }
</div>



@code{
    /*
    public string ValueFirstName { get; set; }

    public string ValueLastName { get; set; }

    public string ValueId { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    string[] searchOption = {"",""};
    
    private async Task OnInputChangeFisrtName(ChangeEventArgs args )
    {
        ValueFirstName = (string)args.Value;
        searchOption[0] = "firstName";
        searchOption[1] = ValueFirstName;
        await ValueChanged.InvokeAsync(ValueFirstName);
    }
    private async Task OnInputChangeLastName(ChangeEventArgs args )
    {
        ValueLastName = (string)args.Value;
        searchOption[0] = "lastName";
        searchOption[1] = ValueLastName;
        await ValueChanged.InvokeAsync(ValueLastName);
    }
    private async Task OnInputChangeId(ChangeEventArgs args )
    {
        ValueId = (string)args.Value;
        searchOption[0] = "id";
        searchOption[1] = ValueId;
        await ValueChanged.InvokeAsync(ValueId);
    }
    
    private void Reload()
    {
        searchOption[0] = "";
        searchOption[1] = "";
    }
    */

    private IList<Adult> allAdults;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allAdults = await _adultService.GetAdultsAsync();
        }
        catch (Exception e)
        {
    // update some error label here, or show popup..
        }
    }
}
